/* Author: Erik Humphrey
 * Date started: February 22nd, 2017
 * Project title: Module 3 - Assignment - GuessTheNumber
 * Description: Game in which the player must guess a random secret number generated by the computer
 */

/* TODO
 * Prevent non-integer guesses (or guesses that aren't within the range)
 * Write pseudocode
 * Implement overloading
 * Document methods  
 * Check for bugs
 * Figure out how to write a method in pseudocode
 * Beautify code
 * Submit pseudocode in G Suite
 * Submit project to dropbox after removing this list
 */

import java.util.concurrent.ThreadLocalRandom;
import java.util.regex.*;
import java.util.Scanner;
import java.io.*;

public class GuessTheNumber {

    static int guess;
    static int guessCount;

    private static File highScores = new File("HighScores.txt");
    static int secretNumber = ThreadLocalRandom.current().nextInt(1, 20 + 1);
    static Scanner userInput = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        // Writes column headers to blank high score table
        // Readers and writers MUST be declared in separate statements
        if (!highScores.exists()) {
            highScores.createNewFile();
            newHighScoreFile();
        }
        else
        {
            BufferedReader br = new BufferedReader(new FileReader(highScores));
            if (br.readLine() == null) {
                newHighScoreFile();
            }
            br.close();
        }

        guessTime();
        System.out.print("I'm thinking of a number from 1 to 20. ");
    }
    // Create a new file with a formatted table 
    // The program only records the top score, but the original intention was to have a formatted table using arrays or something
    static void newHighScoreFile() throws IOException {
        BufferedWriter highScoreAuthor = new BufferedWriter(new FileWriter (highScores));
        highScoreAuthor.write(String.format("%-10s %8s\n", "NAME", "GUESSES"));
        highScoreAuthor.close();
    }
    private static void guessTime() {
        System.out.print("Your guess: ");
        guess = userInput.nextInt();
        guessCount++;

        if (guess == secretNumber) {

            System.out.println("A winner is you!");

            try {
                BufferedReader scoreChecker = new BufferedReader(new FileReader(highScores));
                scoreChecker.readLine();
                scoreChecker.readLine();
                String entry = scoreChecker.readLine();
                
                while (!entry.isEmpty()) {
                    try {
                        try {
                            Matcher regex = Pattern.compile("\\d+").matcher(entry);
                            regex.find();
                            int currentHighScore = Integer.valueOf(regex.group());
                        	
                            // Call a method that checks if the user got it on the first try (for the sake of including overloading)
                            
                        	if (checkScore(guessCount))
                        		System.out.println("Wow! You got it on the first guess!");
                        	else
                        		System.out.println("It took " + guessCount + " guesses. The high score is " + currentHighScore + ".");
                        	
                        	// Call a method with different parameters to check the high score
                        	
                            if (checkScore(guessCount, currentHighScore)) {
                                System.out.println("New high score! Please enter your first name.");
                                writeHighScore();
                            }
                            
                            scoreChecker.close();
                        }
                        // If there are no scores found, write a high score entry.
                        catch (IllegalStateException noMatchFound) { writeHighScore(); }

                    }
                    catch (NumberFormatException noWriteAccess){
                        System.out.println("ERROR: High score could not be saved?");} // Rare case of no write access
                    entry = scoreChecker.readLine();
                }
                scoreChecker.close();
            }
            catch (IOException noReadAccess) {
                System.out.println(""); // Program might work anyway, but this error implies it is open in another program
                // Might trigger if high score is not broken for some reason
            }

            promptNewGame();

        }
        else if (guess > secretNumber) {
            System.out.println("Try a lower number.");
            guessTime(); }
        else if (guess < secretNumber) {
            System.out.println("Try a higher number.");
            guessTime(); }
    }

    /**
     * Returns whether or not the high score was beaten
     *
     * pre: 
     * post: 
     */
    
    public static Boolean checkScore(int userScore, int highScore) {
    	Boolean isHighScore = false;
    	if (userScore < highScore) // A lower score is better in this game (least number of guesses)
    		isHighScore = true;
    	return isHighScore;
    }
    
    public static Boolean checkScore(int userScore) {
    	Boolean isLucky = false;
    	if (userScore == 1)
    		isLucky = true;
    	return isLucky;
    }
    
    private static void writeHighScore() {
        try {
            // The true boolean in the constructor opens file in append mode so it doesn't start fresh with each write
            BufferedWriter highScoreAuthor = new BufferedWriter(new FileWriter(highScores, true));
            highScoreAuthor.newLine();
            highScoreAuthor.write(String.format("%-10s %8s", userInput.next(), guessCount));;
            highScoreAuthor.close();
        } catch (IOException noWriteAccess) {
            System.out.println("ERROR: High score could not be saved.");
        }
    }

    private static void promptNewGame() {
        System.out.println("Would you like to play again? Y/N");
        if (userInput.next().equalsIgnoreCase("y"))
        {
        	guessTime();
            System.out.print("I'm thinking of a number from 1 to 20. ");
        }
        else if (userInput.next().equalsIgnoreCase("n"))
        {
            System.out.println("Hey");
            userInput.close();
        }
    }
}