/* Author: Erik Humphrey
 * Date started: February 22nd, 2017
 * Project title: Module 3 - Assignment - GuessTheNumber
 * Description: Game in which the player must guess a random secret number generated by the computer
 */

/* TODO
 * Prevent non-integer guesses (or guesses that aren't within the range)
 * Limit high score list to 10
 * Write pseudocode
 * Implement overloading
 * Implement parameters and return
 * Document methods  
 * Check for bugs
 * Figure out how to write a method in pseudocode
 * Is it possible for the number to be 0? 1? 20? (19 is confirmed)
 * Beautify code
 * Remove debug messages
 * Submit pseudocode in G Suite
 * Submit project to dropbox after removing this list
 */

import java.util.concurrent.ThreadLocalRandom;
import java.util.regex.*;
import java.util.Scanner;
import java.io.*;

public class GuessTheNumber {

    static int guess;
    static int guessCount;

    private static File highScores = new File("HighScores.txt");
    static int secretNumber = ThreadLocalRandom.current().nextInt(1, 20 + 1);
    static Scanner userInput = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        // Writes column headers to blank high score table
        // Readers and writers MUST be declared in separate statements
        // TODO: Test all possible combinations with this setup
        if (!highScores.exists()) {
            highScores.createNewFile();
            newHighScoreFile();
        }
        else
        {
            BufferedReader br = new BufferedReader(new FileReader(highScores));
            if (br.readLine() == null) {
                newHighScoreFile();
            }
            br.close();
        }

        guessTime();
        System.out.print("I'm thinking of a number from 1 to 20. ");
    }
    static void newHighScoreFile() throws IOException {
        BufferedWriter highScoreAuthor = new BufferedWriter(new FileWriter (highScores));
        highScoreAuthor.write(String.format("%-10s %8s\n", "NAME", "GUESSES"));
        highScoreAuthor.close();
    }
    private static void guessTime() {
        System.out.print("Your guess: ");
        guess = userInput.nextInt();
        guessCount++;

        if (guess == secretNumber) {

            System.out.println("A winner is you!");

            try {
                BufferedReader scoreChecker = new BufferedReader(new FileReader(highScores));
                scoreChecker.readLine();
                scoreChecker.readLine();
                String entry = scoreChecker.readLine();
                System.out.println("Entry reads: " + entry);
                // scoreChecker.readLine(); // Skip one line, which should be the header line
                // String entry = scoreChecker.readLine();
                System.out.println(entry);
                Boolean isHighScore = false;
                
                System.out.println("Should be true: " + !isHighScore);
                System.out.println("Should be true: " + !entry.isEmpty() + " (Entry line reads: " + entry);
                System.out.println("Should be true: " + (!isHighScore && !entry.isEmpty()));
                while (!isHighScore && !entry.isEmpty()) {
                	System.out.println("1");
                    try {
                    	System.out.println("2");
                        // System.out.println("New high score! Please enter your first name.");
                        // Use a regular expression to find integers/digit characters (\d) of one or more (+)
                        try {
                        	System.out.println("3");
                            Matcher regex = Pattern.compile("\\d+").matcher(entry);
                            regex.find();
                        	System.out.println("DEBUG: Passed the second regex!!!");
                        	System.out.println(regex);
                        	System.out.println(entry);
                        	System.out.println("It took " + guessCount + " guesses. The high score is " + Integer.valueOf(regex.group()) + "." + (guessCount < Integer.valueOf(regex.group())));
                            if (guessCount < Integer.valueOf(regex.group())) {
                            	System.out.println("DEBUG: Entered the if statement.");
                                // TODO: Repeat check up to 10 high scores instead of just checking the highest one
                            	// maybe use an array for the highscores you maniac
                                System.out.println("New high score! Please enter your first name.");
                                writeHighScore();
                                isHighScore = true;
                            }
                        	System.out.println("DEBUG: Passed the if statement");
                        }
                        // If there are no scores found, write a high score entry.
                        catch (IllegalStateException noMatchFound) { System.out.println("No match found??");writeHighScore(); }

                    }
                    catch (NumberFormatException e){
                        System.out.println("ERROR: High score could not be saved??");}
                    entry = scoreChecker.readLine();
                }
                scoreChecker.close();
            }
            catch (IOException noReadAccess) {
                System.out.println("ERROR: Could not read high score file.");
            }

            promptNewGame();

        }
        else if (guess > secretNumber) {
            System.out.println("Try a lower number.");
            guessTime(); }
        else if (guess < secretNumber) {
            System.out.println("Try a higher number.");
            guessTime(); }
    }

    private static void writeHighScore() {
        try {
            // The true boolean in the constructor opens file in append mode so it doesn't start fresh with each write
            BufferedWriter highScoreAuthor = new BufferedWriter(new FileWriter(highScores, true));
            highScoreAuthor.newLine();
            highScoreAuthor.write(String.format("%-10s %8s", userInput.next(), guessCount));
            // highScoreAuthor.flush();
            highScoreAuthor.close();
        } catch (IOException noWriteAccess) {
            System.out.println("ERROR: High score could not be saved.");
        }
    }
    private static void printHighScoreTable() {
        System.out.format("%-10s %8s\n", "NAME", "GUESSES");
        System.out.format("%-10s %8s\n", "Erik", "5");
        System.out.format("%-10s %8s\n", "Jeremy", "11");
        System.out.format("%-10s %8s\n", "Shannon", "14");
        System.out.format("%-10s %8s\n", "Cameron", "16");
        System.out.format("%-10s %8s\n", "Shaun", "20");
    }

    private static void promptNewGame() {
        System.out.println("Would you like to play again? Y/N");
        if (userInput.next().equalsIgnoreCase("y"))
        {

        }
        else if (userInput.next().equalsIgnoreCase("n"))
        {
            System.out.println("Hey");
            userInput.close();
        }
    }
}